!
! A super-basic example of solving an equation
! using Newton's method
!
! This is the template file used for the scripted version  
!
program newton
  
  implicit none
  double precision :: f,fp,x,xprev,dx,ecurr,eprev,r1,r2,m
  integer :: iter
  
  ! Here we try to find the solution to the
  ! f(x) = 0
  
  if ('FFFF'.eq."x*x") then
    m = 2.d0
  else
    m = 1.d0
  endif
  x = -0.5d0
  f = ffun(x)
  xprev = x + 1
  ecurr = 1.d0
  iter = 0
  do while (ecurr > 10.d0**(-15) .AND. ffun(x) /= 0)
     iter = iter + 1
     f = ffun(x)
     fp = fpfun(x)
     dx = -f/fp
     xprev = x
     x = x + (m*dx)
     eprev = ecurr
     ecurr = abs(x - xprev)
     !print *, "f: ", f, "fp: ", fp, "dx: ", dx
     !print *, "ecurr:", ecurr, "eprev:", eprev
     r1 = ecurr/eprev
     r2 = r1/eprev
     write(*,'(A18,I2.2,2(E24.16))') ' FFFF ', iter, x, dx, r1, r2
  end do

contains

  double precision function ffun(x)
    implicit none
    double precision :: x

    ffun = FFFF

  end function ffun

  double precision function fpfun(x)
    implicit none
    double precision :: x

    fpfun = FPFP

  end function fpfun

end program newton
