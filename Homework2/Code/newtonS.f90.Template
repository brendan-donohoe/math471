!
! A super-basic example of solving an equation
! using Newton's method
!
! This is the template file used for the scripted version  
!
! exp(x)-4.d0*x+8.d0*log(2.d0)-4.d0
program newton
  
  implicit none
  double precision :: f,fp,x,xprev,dx,ecurr,eprev,r1,r2,m
  integer :: iter
  character (len=50) :: fst

  ! Here we try to find the solution to the
  ! f(x) = 0

  fst = 'FFFF'
  
  if (fst.eq.'x*x' .OR. fst.eq.'cos(x)-1.d0' .OR. fst.eq.'exp(x)-4.d0*x+8.d0*log(2.d0)-4.d0') then
    m = 2.d0
  else
    m = 1.d0
  endif
  x = GGGG
  f = ffun(x)
  xprev = x + 1
  ecurr = 1.d0
  iter = 0
  do while (ecurr > 10.d0**(-15) .AND. (fst /= 'x*x' .OR. ffun(x) /= 0))
     iter = iter + 1
     f = ffun(x)
     fp = fpfun(x)
     dx = -f/fp
     xprev = x
     x = x + (m*dx)
     eprev = ecurr
     ecurr = abs(x - xprev)
     r1 = ecurr/eprev
     r2 = r1/eprev
     write(*,'(A18,I2.2,2(E24.16))') ' FFFF ', iter, x, dx, r1, r2
  end do

contains

  double precision function ffun(x)
    implicit none
    double precision :: x

    ffun = FFFF

  end function ffun

  double precision function fpfun(x)
    implicit none
    double precision :: x

    fpfun = FPFP

  end function fpfun

end program newton
